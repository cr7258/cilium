name: Cilium Runtime (ci-runtime)

# Any change in triggers needs to be reflected in the concurrency group.
on:
  push:
    branches:
      - pr/aanm-test-test-test

# By specifying the access of one of the scopes, all of those that are not
# specified are set to 'none'.
permissions:
  # To be able to access the repository with actions/checkout
  contents: read
  # To allow retrieving information from the PR API
  pull-requests: read
  # So that Sibz/github-status-action can write into the status API
  statuses: write

concurrency:
  # Structure:
  # - Workflow name
  # - Event type
  # - A unique identifier depending on event type:
  #   - schedule: SHA
  #   - issue_comment: PR number
  #   - pull_request: PR number
  #
  # This structure ensures a unique concurrency group name is generated for each
  # type of testing:
  # - schedule: {name} schedule {SHA}
  # - issue_comment: {name} issue_comment {PR number}
  # - pull_request: {name} pull_request {PR number}
  #
  # Note: for `issue_comment` triggers, we additionally need to filter out based
  # on comment content, otherwise any comment will interrupt workflow runs.
  group: |
    ${{ github.workflow }}
    ${{ github.event_name }}
    ${{
      (github.event_name == 'schedule' && github.sha) ||
      (github.event_name == 'issue_comment' && (
        github.event.comment.body == '/ci-runtime' ||
        github.event.comment.body == '/test'
      ) && github.event.issue.number) ||
      (github.event_name == 'pull_request' && github.event.pull_request.number)
    }}
  cancel-in-progress: true

env:
  check_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  # List of Runtime tests
  # f-<ID>-<description>: <Regex that matches the tests in the section>
  ###
  f-01-agent: "RuntimeAgent|RuntimeSSHTests"
  # RuntimeAgentChaos Cilium agent Checking for file-descriptor leak
  # RuntimeAgentChaos Cilium agent removing leftover Cilium interfaces
  # RuntimeAgentChaos Connectivity over restarts Checking that during restart no traffic is dropped using Egress + Ingress Traffic
  # RuntimeAgentChaos Endpoint Endpoint recovery on restart
  # RuntimeAgentChaos KVStore Delete event on KVStore with CIDR identities
  # RuntimeAgentChaos KVStore Validate that delete events on KVStore do not release in use identities
  # RuntimeAgentFQDNPolicies Can update L7 DNS policy rules
  # RuntimeAgentFQDNPolicies CNAME follow
  # RuntimeAgentFQDNPolicies DNS proxy policy works if Cilium stops
  # RuntimeAgentFQDNPolicies Enforces L3 policy even when no IPs are inserted
  # RuntimeAgentFQDNPolicies Enforces ToFQDNs policy
  # RuntimeAgentFQDNPolicies Implements matchPattern: *
  # RuntimeAgentFQDNPolicies Interaction with other ToCIDR rules
  # RuntimeAgentFQDNPolicies Roundrobin DNS
  # RuntimeAgentFQDNPolicies toFQDNs populates toCIDRSet (data from proxy) L3-dependent L7/HTTP with toFQDN updates proxy policy
  # RuntimeAgentFQDNPolicies toFQDNs populates toCIDRSet (data from proxy) Policy addition after DNS lookup
  # RuntimeAgentFQDNPolicies Validate dns-proxy monitor information
  # RuntimeAgentFQDNPolicies With verbose policy logs Validates DNSSEC responses
  # RuntimeAgentKVStoreTest KVStore tests Consul KVStore
  # RuntimeAgentKVStoreTest KVStore tests Etcd KVStore
  # RuntimeAgentPolicies Init Policy Default Drop Test tests egress
  # RuntimeAgentPolicies Init Policy Default Drop Test tests ingress
  # RuntimeAgentPolicies Init Policy Default Drop Test With PolicyAuditMode tests egress
  # RuntimeAgentPolicies Init Policy Default Drop Test With PolicyAuditMode tests ingress
  # RuntimeAgentPolicies Init Policy Test Init Egress Policy Test
  # RuntimeAgentPolicies Init Policy Test Init Ingress Policy Test
  # RuntimeAgentPolicies TestsEgressToHost Tests Egress To Host
  # RuntimeAgentPolicies TestsEgressToHost Tests egress with CIDR+L4 policy
  # RuntimeAgentPolicies TestsEgressToHost Tests egress with CIDR+L4 policy to external https service
  # RuntimeAgentPolicies TestsEgressToHost Tests egress with CIDR+L7 policy
  # RuntimeAgentPolicies Tests Endpoint Connectivity Functions After Daemon Configuration Is Updated
  # RuntimeAgentPolicies Tests EntityNone as a deny-all
  # RuntimeSSHTests Should fail when context times out
  ###
  f-02-datapath: "RuntimeDatapathConntrackInVethModeTest|RuntimeDatapathMonitorTest"
  # RuntimeDatapathConntrackInVethModeTest Conntrack-related configuration options for endpoints
  # RuntimeDatapathMonitorTest With Sample Containers checks container ids match monitor output
  # RuntimeDatapathMonitorTest With Sample Containers cilium monitor check --from
  # RuntimeDatapathMonitorTest With Sample Containers cilium monitor check --related-to
  # RuntimeDatapathMonitorTest With Sample Containers cilium monitor check --to
  # RuntimeDatapathMonitorTest With Sample Containers Cilium monitor event types
  # RuntimeDatapathMonitorTest With Sample Containers Cilium monitor verbose mode
  # RuntimeDatapathMonitorTest With Sample Containers delivers the same information to multiple monitors
  ###
  f-03-privileged: "RuntimeDatapathPrivilegedUnitTests"
  # RuntimeDatapathPrivilegedUnitTests Run Tests
  ###

jobs:
  setup-report:
    runs-on: ubuntu-latest
    name: Set commit status
    outputs:
      sha: 56d63bc29e5bc2455850772e33a814c9df5caffc
    steps:
      - name: Set up job variables
        id: vars
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            PR_API_JSON=$(curl \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.issue.pull_request.url || github.event.pull_request.url }})
            SHA=$(echo "$PR_API_JSON" | jq -r ".head.sha")
          else
            SHA=${{ github.sha }}
          fi
          echo "sha=${SHA}" >> $GITHUB_OUTPUT

      - name: Set commit status to pending
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: 56d63bc29e5bc2455850772e33a814c9df5caffc
          context: ${{ github.workflow }}
          description: Runtime tests in progress...
          state: pending
          target_url: ${{ env.check_url }}

  # Pre-build the ginkgo binary so that we don't have to build it for all
  # runners.
  build-ginkgo-binary:
    runs-on: ubuntu-latest
    name: Build Ginkgo Runtime
    steps:
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          ref: ${{ steps.vars.outputs.sha }}
          persist-credentials: false

      # Load Ginkgo build from GitHub
      - name: Load ginkgo runtime from GH cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: cache
        with:
          path: /tmp/.ginkgo-build/
          key: ${{ runner.os }}-ginkgo-runtime-${{ hashFiles('**/*.go') }}

      - name: Install Go
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.4

      - name: Build Ginkgo
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          go install github.com/onsi/ginkgo/ginkgo@v1.16.5
          mkdir -p /tmp/.ginkgo-build

      - name: Build Test
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd test
          /home/runner/go/bin/ginkgo build
          strip test.test
          tar -cz test.test -f test.tgz

      - name: Store Ginkgo Test in GitHub cache path
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          mkdir -p /tmp/.ginkgo-build/
          if [ -f test/test.tgz ]; then
            cp test/test.tgz /tmp/.ginkgo-build/
            echo "file copied"
          fi

  setup-and-test:
    needs: build-ginkgo-binary
    runs-on:
      group: ginkgo-runners
    name: Runtime Test
    strategy:
      fail-fast: false
      max-parallel: 60
      matrix:
        focus:
          - "f-01-agent"
          - "f-02-datapath"
          - "f-03-privileged"

    timeout-minutes: 60
    steps:
      - name: Set up job variables
        id: vars
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            PR_API_JSON=$(curl \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.issue.pull_request.url || github.event.pull_request.url }})
            SHA=$(echo "$PR_API_JSON" | jq -r ".head.sha")
          else
            SHA=${{ github.sha }}
          fi

          echo "sha=${SHA}" >> $GITHUB_OUTPUT

          case ${{ matrix.focus }} in
              f-01-agent)
                  focus="${{ env.f-01-agent }}"
                  ;;
              f-02-datapath)
                  focus="${{ env.f-02-datapath }}"
                  ;;
              f-03-privileged)
                  focus="${{ env.f-03-privileged }}"
                  ;;
              *)
                  echo "focus group not found!"
                  ;;
          esac

          echo "focus=${focus}" >> $GITHUB_OUTPUT

      - name: Checkout pull request for tests
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ steps.vars.outputs.sha }}
          persist-credentials: false

      # Load Ubuntu cache from GitHub
      - name: Load ${{ matrix.name }} Ubuntu packages from GitHub
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: ubuntu-cache
        with:
          path: /tmp/.ubuntu-pkgs
          key: ${{ runner.os }}-ubuntu-pkgs-bpf-next-20230328.094633

      - name: Download LVH dependencies
        if: ${{ steps.ubuntu-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          sudo apt update
          sudo apt-get clean
          sudo apt-get -d -y --no-install-recommends install cpu-checker qemu-system-x86 libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager
          sudo mkdir -p /tmp/.ubuntu-pkgs
          sudo cp /var/cache/apt/archives/*.deb /tmp/.ubuntu-pkgs

      - name: Install LVH dependencies
        shell: bash
        run: |
          # Disable auto update of man-db for every package
          sudo rm /var/lib/man-db/auto-update
          sudo cp /tmp/.ubuntu-pkgs/*.deb /var/cache/apt/archives/
          sudo apt-get -y --no-install-recommends install /tmp/.ubuntu-pkgs/*.deb
          sudo kvm-ok

      - name: Provision LVH VMs
        uses: cilium/little-vm-helper@0b7d7157dae56a44dc531c852e7756dc671071af # v0.0.3
        with:
          test-name: runtime-tests
          image-version: bpf-next-20230328.094633@sha256:b3354f22514f552a504ec2cfc1105d73cffe4bb8408705b511fd8444327590ca
          host-mount: ./
          cpu: 4
          mem: 12G
          dns-resolver: '1.1.1.1'

      - name: Install dependencies in little-vm-helper
        uses: cilium/little-vm-helper@0b7d7157dae56a44dc531c852e7756dc671071af # v0.0.3
        with:
          provision: 'false'
          cmd: |
            cd /host/
            sudo apt-get install -y jq wget moreutils netcat-openbsd

      # Load Ginkgo build from GitHub
      - name: Load ${{ matrix.name }} Ginkgo build from GitHub
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: cache
        with:
          path: /tmp/.ginkgo-build/
          key: ${{ runner.os }}-ginkgo-runtime-${{ hashFiles('**/*.go') }}

      - name: Copy Ginkgo binary
        shell: bash
        run: |
          cd test/
          tar -xf /tmp/.ginkgo-build/test.tgz

      - name: Wait for images to be available
        timeout-minutes: 10
        shell: bash
        run: |
          for image in cilium-ci operator-generic-ci hubble-relay-ci ; do
            until docker manifest inspect quay.io/cilium/$image:56d63bc29e5bc2455850772e33a814c9df5caffc &> /dev/null; do sleep 45s; done
          done

      - name: Setup runtime
        timeout-minutes: 10
        uses: cilium/little-vm-helper@0b7d7157dae56a44dc531c852e7756dc671071af # v0.0.3
        with:
          provision: 'false'
          cmd: |
            mkdir -p /root/go/src/github.com/cilium/
            ln -s /host /root/go/src/github.com/cilium/cilium
            mkdir -p /home/root/go/src/github.com/cilium/
            ln -s /host /home/root/go/src/github.com/cilium//cilium
            cp -r /host/test/provision /tmp
            git config --global --add safe.directory /host
            export CILIUM_IMAGE=quay.io/cilium/cilium-ci:56d63bc29e5bc2455850772e33a814c9df5caffc
            export CILIUM_DOCKER_PLUGIN_IMAGE=quay.io/cilium/docker-plugin-ci:56d63bc29e5bc2455850772e33a814c9df5caffc
            export PROVISION_EXTERNAL_WORKLOAD=false
            export VMUSER=root
            echo '127.0.0.1 localhost' >> /etc/hosts
            echo '::1 localhost' >> /etc/hosts
            /tmp/provision/runtime_install.sh
            service docker restart

      - name: Runtime tests
        if: ${{ matrix.focus == 'f-01-agent' || matrix.focus == 'f-02-datapath' }}
        timeout-minutes: 20
        shell: bash
        run: |
          cat > test/cilium-ssh-config.txt << EOF
          Host runtime
            HostName 127.0.0.1
            User root
            Port 2222
            UserKnownHostsFile /dev/null
            StrictHostKeyChecking no
            PasswordAuthentication no
            LogLevel FATAL
          EOF
          cd test
          export INTEGRATION_TESTS=true
          ./test.test \
          --ginkgo.focus="${{ steps.vars.outputs.focus }}" \
          --ginkgo.skip="${{ matrix.skip }}" \
          --ginkgo.seed=1679952881 \
          --ginkgo.v -- \
          -cilium.provision=false \
          --cilium.image=quay.io/cilium/cilium-ci \
          -cilium.tag=56d63bc29e5bc2455850772e33a814c9df5caffc  \
          --cilium.operator-image=quay.io/cilium/operator \
          -cilium.operator-tag=56d63bc29e5bc2455850772e33a814c9df5caffc \
          --cilium.hubble-relay-image=quay.io/cilium/hubble-relay-ci \
          -cilium.hubble-relay-tag=56d63bc29e5bc2455850772e33a814c9df5caffc \
          -cilium.operator-suffix=-ci \
          -cilium.SSHConfig="cat ./cilium-ssh-config.txt"

      - name: Runtime privileged tests
        if: ${{ matrix.focus == 'f-03-privileged' }}
        timeout-minutes: 20
        uses: cilium/little-vm-helper@0b7d7157dae56a44dc531c852e7756dc671071af # v0.0.3
        with:
          provision: 'false'
          cmd: |
            cd /host
            go install github.com/jstemmer/go-junit-report/v2@latest
            ip route
            export GOTEST_FORMATTER="/root/go/bin/go-junit-report -set-exit-code -iocopy -out test/privileged-runtime.xml"
            make tests-privileged NO_COLOR=1

      - name: Debug
        if: ${{ !success() }}
        shell: bash
        run: |
          ip route
          ip route list all
          ip rule list
          ip route show table local
          ip link

      - name: Debug
        if: ${{ !success() && matrix.focus == 'f-03-privileged' }}
        timeout-minutes: 20
        uses: cilium/little-vm-helper@0b7d7157dae56a44dc531c852e7756dc671071af # v0.0.3
        with:
          provision: 'false'
          cmd: |
            ip route
            ip route list all
            ip rule list
            ip route show table local
            ip link

      - name: Fetch artifacts
        if: ${{ !success() && (matrix.focus == 'f-01-agent' || matrix.focus == 'f-02-datapath') }}
        shell: bash
        run: |
          tar -zcf test_results-${{ matrix.name }}.tar.gz ./test/test_results

      - name: Upload artifacts
        if: ${{ !success() && (matrix.focus == 'f-01-agent' || matrix.focus == 'f-02-datapath') }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: cilium-sysdumps
          path: |
            test_results-*.tar.gz
          retention-days: 5

      - name: Fetch Junit
        if: ${{ always() }}
        shell: bash
        run: |
          mkdir -p cilium-junits
          cd test/
          for filename in *.xml; do cp "${filename}" "../cilium-junits/${{ matrix.focus }}-${RANDOM}-${filename}"; done;

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: cilium-junits
          path: |
            cilium-junits/*.xml
          retention-days: 2

      - name: Publish Test Results
        if: ${{ always() }}
        shell: bash
        run: |
          for filename in cilium-junits/*.xml; do go run tools/junit2md/main.go -i "${filename}" -s=false -p=false  >> "$GITHUB_STEP_SUMMARY"; done;
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "<details>" >> "$GITHUB_STEP_SUMMARY"
          echo "  <summary>Click here to see all tests summary</summary>" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          for filename in cilium-junits/*.xml; do go run tools/junit2md/main.go -i "${filename}" -s=false  >> "$GITHUB_STEP_SUMMARY"; done;
          echo "</details>" >> "$GITHUB_STEP_SUMMARY"

